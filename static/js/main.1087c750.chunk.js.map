{"version":3,"sources":["components/card/card.jsx","components/cardList/cardList.jsx","components/searchBox/searchBox.jsx","components/table/table-row.jsx","components/table/table.jsx","App.js","serviceWorker.js","index.js"],"names":["Details","description","status","Card","data","className","assignment","toLowerCase","location","tail_no","work_time","watching","role","aria-label","CardList","props","map","d","key","id","SearchBox","placeholder","handleChange","type","onChange","TableRow","Object","keys","i","classes","value","Table","DataView","cards","filteredData","App","filterByString","e","string","state","filter","m","includes","target","setState","filterByStatus","filterWatching","orderByStatus","order","slice","sort","n","toggleView","viewCards","resetData","fetch","then","res","json","rooms","catch","err","console","log","this","onClick","Component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1087c750.chunk.js","sourcesContent":["import React from 'react';\n\nimport './card.styles.css';\n\nconst Details = ({ description, status }) => {\n  if (status === 0) {\n    return <h2>Unassigned</h2>;\n  }\n\n  return <p>{description}</p>;\n};\n\nconst Card = ({ data }) => (\n  <li\n    className={`card-container card-status-${data.assignment.status.toLowerCase()}`}\n  >\n    <span className=\"status\">\n      <span>{data.assignment.status.toLowerCase()}</span>\n      <span>{data.location}</span>\n    </span>\n    <h2>{data.tail_no}</h2>\n    <span>Avg work time: {data.work_time}</span>\n    <hr />\n    <Details description={data.description} status={data.status} />\n    {data.watching && (\n      <div className=\"watching\">\n        <span role=\"image\" aria-label=\"watching\">\n          👁️\n        </span>\n      </div>\n    )}\n  </li>\n);\n\nexport default Card;\n","import React from 'react';\n\nimport './card-list.styles.css';\n\nimport Card from '../card/card';\n\nconst CardList = props => (\n  <ul className=\"card-list\">\n    {props.data.map(d => (\n      <Card key={d.id} data={d} />\n    ))}\n  </ul>\n);\n\nexport default CardList;\n","import React from 'react';\n\nimport './searchBox.styles.css';\n\nconst SearchBox = ({ placeholder, handleChange }) => (\n  <input\n    className=\"search\"\n    type=\"search\"\n    placeholder={placeholder}\n    onChange={handleChange}\n  />\n);\n\nexport default SearchBox;\n","import React from 'react';\n\nimport './table.styles.css';\n\nconst TableRow = props => {\n  return (\n    <>\n      <tr className=\"row\">\n        {Object.keys(props.data).map((key, i) => {\n          let classes = 'data';\n          let value = props.data[key];\n          if (key === 'assignment') {\n            classes += ` td-status td-status-${props.data[\n              key\n            ].status.toLowerCase()}`;\n            value = props.data[key].status;\n          }\n          if (key === 'watching') {\n            value = props.data[key] ? '✔️' : '';\n          }\n          if (key === 'comments' || key === 'id') {\n            return null;\n          }\n          return (\n            <td className={classes} key={key}>\n              {value}\n            </td>\n          );\n        })}\n      </tr>\n    </>\n  );\n};\n\nexport default TableRow;\n","import React from 'react';\n\nimport './table.styles.css';\n\nimport TableRow from './table-row';\n\nconst Table = props => (\n  <table>\n    <thead>\n      <tr className=\"row1\">\n        <td>Issue Id</td>\n        <td>Status</td>\n        <td>Progress</td>\n        <td>Location</td>\n        <td>Company</td>\n        <td>Issue</td>\n        <td>Watching</td>\n        <td>Estimate</td>\n      </tr>\n    </thead>\n    <tbody>\n      {props.data.map(d => (\n        <TableRow key={d.id} data={d} />\n      ))}\n    </tbody>\n  </table>\n);\n\nexport default Table;\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport { CardList, SearchBox, Table } from './components';\n\nconst DataView = ({ cards, filteredData }) => {\n  if (cards) {\n    return <CardList data={filteredData} />;\n  } else {\n    return <Table data={filteredData} />;\n  }\n};\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      filteredData: [],\n      filter: null,\n      order: null,\n      data: [],\n      viewCards: true\n    };\n  }\n\n  componentDidMount() {\n    fetch(\n      'https://my-json-server.typicode.com/beesandtrees/typicode-json/rooms'\n    )\n      .then(res => res.json())\n      .then(rooms =>\n        this.setState({\n          filteredData: rooms,\n          data: rooms,\n          filter: null,\n          order: null\n        })\n      )\n      .catch(err => console.log(err));\n  }\n\n  filterByString = (e, string) => {\n    const filteredData = this.state.data.filter(m =>\n      m[string].toLowerCase().includes(e.target.value.toLowerCase())\n    );\n\n    this.setState({ filteredData, filter: 'tail_no' });\n  };\n\n  filterByStatus = status => {\n    const filteredData = this.state.data.filter(\n      m => m.status === status || m.assignment.status === status\n    );\n\n    this.setState({ filteredData, filter: status });\n  };\n\n  filterWatching = () => {\n    const filteredData = this.state.data.filter(m => m.watching);\n\n    this.setState({ filteredData, filter: 'Watching' });\n  };\n\n  orderByStatus = (e, order) => {\n    const filteredData = this.state.data\n      .slice(0)\n      .sort((m, n) => m.status - n.status);\n\n    this.setState({ filteredData, order });\n  };\n\n  toggleView = () => this.setState({ viewCards: !this.state.viewCards });\n\n  resetData = () => {\n    this.setState({ filteredData: this.state.data, order: null, filter: null });\n  };\n\n  render() {\n    const { filteredData, filter, viewCards } = this.state;\n\n    return (\n      <div className=\"App\">\n        <header>\n          <h1>Issue Tracker</h1>\n        </header>\n        <main>\n          <div className=\"filter-bar\">\n            <nav>\n              <section>\n                <h3>Search</h3>\n                <SearchBox\n                  handleChange={e => this.filterByString(e, 'tail_no')}\n                  placeholder=\"Search By Name\"\n                />\n              </section>\n              <section>\n                <h3>Filter</h3>\n                <button\n                  className={filter === null ? 'button active' : 'button'}\n                  onClick={this.resetData}\n                >\n                  All\n                </button>\n                <button\n                  className={\n                    filter === 'Unassigned' ? 'button active' : 'button'\n                  }\n                  onClick={() => this.filterByStatus('Unassigned')}\n                >\n                  Unassigned\n                </button>\n                <button\n                  className={\n                    filter === 'In Progress' ? 'button active' : 'button'\n                  }\n                  onClick={() => this.filterByStatus('In Progress')}\n                >\n                  In Progress\n                </button>\n                <button\n                  className={filter === 'Watching' ? 'button active' : 'button'}\n                  onClick={this.filterWatching}\n                >\n                  Watching\n                </button>\n                <button\n                  className={\n                    filter === 'Read-Only' ? 'button active' : 'button'\n                  }\n                  onClick={() => this.filterByStatus('Read-Only')}\n                >\n                  Sabre\n                </button>\n              </section>\n              <section>\n                <h3>Filter Location</h3>\n                <SearchBox\n                  handleChange={e => this.filterByString(e, 'location')}\n                  placeholder=\"Search By Location\"\n                />\n              </section>\n            </nav>\n          </div>\n          <div className=\"cards\">\n            <div className=\"toggle\">\n              <button\n                className={viewCards ? 'button active' : 'button'}\n                onClick={this.toggleView}\n              >\n                Card View\n              </button>\n              <button\n                className={!viewCards ? 'button active' : 'button'}\n                onClick={this.toggleView}\n              >\n                Table View\n              </button>\n            </div>\n            <DataView cards={viewCards} filteredData={filteredData} />\n          </div>\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}